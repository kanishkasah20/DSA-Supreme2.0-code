#include <bits/stdc++.h> 
#include<iostream>
#include<vector>
using namespace std;

int solveTD(vector<int>&prices, int i, int buy, int limit, vector<vector<vector<int>>>&dp){
    if(i>= prices.size() || limit==0) return 0;

    if(dp[i][buy][limit]!=-1) return dp[i][buy][limit];

    int profit = 0;
    if(buy){
        int buyItProfit = -prices[i] + solveTD(prices, i+1, 0, limit, dp);
        int skipProfit = solveTD(prices,i+1,1,limit,dp);
        profit = max(buyItProfit,skipProfit);
    }
    else{
        int sellItProfit = prices[i] + solveTD(prices,i+1,1,limit-1,dp);
        int skipProfit = solveTD(prices, i+1, 0 , limit, dp);
        profit = max(sellItProfit,skipProfit);
    
    }
    //return profit
    dp[i][buy][limit] = profit;
    return profit;
}
int maximumProfit(vector<int> &prices, int n, int k)
{
    // Write your code here.
    vector<vector<vector<int>>> dp(n,vector<vector<int>>(2, vector<int>(k+1, -1)));
    return solveTD(prices, 0, 1,k, dp);
}
